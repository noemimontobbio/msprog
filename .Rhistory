relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
# subjects = subj_all[1:30]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count <- event_count(output) #output[[1]] # summary of detected events for each subject
res <- results(output) #output[[2]] # extended info on event sequence for each subject
s = output$prog_settings
print(count)
print(res)
criteria_text(output)
#####################################################################################
# Create toy data
# toydata_visits = read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog_toydata.xlsx", sheet='visits')
# toydata_visits$id = as.character(toydata_visits$id)
# toydata_visits$date = as.Date(toydata_visits$date)
# toydata_relapses = read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog_toydata.xlsx", sheet='relapses')
# toydata_relapses$id = as.character(toydata_relapses$id)
# toydata_relapses$date = as.Date(toydata_relapses$date)
# save(toydata_visits, file="data/toydata_visits.RData")
# save(toydata_relapses, file="data/toydata_relapses.RData")
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- FALSE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- NULL # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- 150 # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/prova.xlsx")
# relapse <- NULL
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
# subjects = subj_all[1:30]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count150 <- event_count(output) #output[[1]] # summary of detected events for each subject
res150 <- results(output) #output[[2]] # extended info on event sequence for each subject
sum(res$time2event - res150$time2event)
View(res)
View(res150)
sum(res[1:100, 'time2event'] - res150[1:100, 'time2event])
sum(res[1:100, 'time2event'] - res150[1:100, 'time2event'])
sum(res[1:200, 'time2event'] - res150[1:200, 'time2event'])
sum(res[1:300, 'time2event'] - res150[1:300, 'time2event'])
sum(res[1:500, 'time2event'] - res150[1:500, 'time2event'])
sum(res[1:1000, 'time2event'] - res150[1:1000, 'time2event'])
sum(res[1:1500, 'time2event'] - res150[1:1500, 'time2event'])
sum(res[1:1800, 'time2event'] - res150[1:1800, 'time2event'])
View(res150)
View(res)
sum(res[1:1900, 'time2event'] - res150[1:1900, 'time2event'])
res150[1:1900, 'time2event']
sum(res[1:1866, 'time2event'] - res150[1:1866, 'time2event'])
sum(res[1:1850, 'time2event'] - res150[1:1850, 'time2event'])
sum(res[1:1810, 'time2event'] - res150[1:1810, 'time2event'])
sum(res[1:1820, 'time2event'] - res150[1:1820, 'time2event'])
sum(res[1:1830, 'time2event'] - res150[1:1830, 'time2event'])
View(data)
View(res150)
View(res)
150*7
max(res$total_fu)
max(res$total_fu)/7
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- FALSE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- NULL # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- 160 # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/prova.xlsx")
# relapse <- NULL
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
# subjects = subj_all[1:30]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count160 <- event_count(output) #output[[1]] # summary of detected events for each subject
res160 <- results(output) #output[[2]] # extended info on event sequence for each subject
sum(res$time2event - res160$time2event)
roxygen2::roxygenise()
rm(list = c("compute_delta", "criteria_text", "event_count", "is_event", "MSprog", "relapse_indep_from_bounds", "results"))
roxygen2::roxygenise()
install.packages('pandoc')
packageVersion("pandoc")
install.packages("pandoc")
install.packages('MSOutcomes')
install.packages('MSoutcomes')
?MSoutcomes
??MSoutcomes
rm(list=ls())
library(readxl)
library(dplyr)
library(msprog)
library(MSoutcomes)
# source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
# source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
# source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
# source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- FALSE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- NULL # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- T # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/prova.xlsx")
# relapse <- NULL
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
View(data)
data_k <- rename(data, 'ID'=subj_col)
datak <- data
names(datak)[names(datak) == subj_col] <- "ID"
names(datak)[names(datak) == date_col] <- "dateEDSS"
names(datak)[names(datak) == value_col] <- "EDSS"
all_subj <- unique(datak[[subj_col]])
datak$daysPostRelapse = Inf
View(data_k)
View(datak)
for (subjid in all_subj) {
data_id <- data[data[[subj_col]] == subjid, ]
nvisits <- nrow(data_id)
first_visit <- min(data_id[[date_col]])
relapse_id <- relapse[relapse[[rsubj_col]] == subjid, ]
relapse_dates <- relapse_id[[rdate_col]]
nrel <- length(relapse_dates)
if (length(relapse_dates) > 0) {
relapse_df <- data.frame(split(rep(relapse_dates, each=nrow(data_id)),
rep(1:length(relapse_dates), each=nrow(data_id))))
relapse_df$visit <- data_id[,][[date_col]]
dist <- (relapse_df %>% mutate(across(1:length(relapse_dates),
~ as.numeric(.x - visit))))[1:length(relapse_dates)]
distm <- - dist
distm[distm<0] <- Inf
data_id$closest_rel_minus <- if (all(is.na(distm))) Inf else apply(distm, 1, min, na.rm=TRUE)
}
}
datak <- data
names(datak)[names(datak) == subj_col] <- "ID"
names(datak)[names(datak) == date_col] <- "dateEDSS"
names(datak)[names(datak) == value_col] <- "EDSS"
all_subj <- unique(datak[[subj_col]])
datak$daysPostRelapse = Inf
for (subjid in all_subj) {
data_id <- datak[datak[['ID']] == subjid, ]
nvisits <- nrow(data_id)
first_visit <- min(data_id[['dateEDSS']])
relapse_id <- relapse[relapse[[rsubj_col]] == subjid, ]
relapse_dates <- relapse_id[[rdate_col]]
nrel <- length(relapse_dates)
if (length(relapse_dates) > 0) {
relapse_df <- data.frame(split(rep(relapse_dates, each=nrow(data_id)),
rep(1:length(relapse_dates), each=nrow(data_id))))
relapse_df$visit <- data_id[,][['dateEDSS']]
dist <- (relapse_df %>% mutate(across(1:length(relapse_dates),
~ as.numeric(.x - visit))))[1:length(relapse_dates)]
distm <- - dist
distm[distm<0] <- Inf
data_id$closest_rel_minus <- if (all(is.na(distm))) Inf else apply(distm, 1, min, na.rm=TRUE)
}
datak[datak[['ID']] == subjid, ] = data_id
}
View(datak)
datak <- data
names(datak)[names(datak) == subj_col] <- "ID"
names(datak)[names(datak) == date_col] <- "dateEDSS"
names(datak)[names(datak) == value_col] <- "EDSS"
all_subj <- unique(datak[[subj_col]])
datak$daysPostRelapse = Inf
for (subjid in all_subj) {
data_id <- datak[datak[['ID']] == subjid, ]
nvisits <- nrow(data_id)
first_visit <- min(data_id[['dateEDSS']])
relapse_id <- relapse[relapse[[rsubj_col]] == subjid, ]
relapse_dates <- relapse_id[[rdate_col]]
nrel <- length(relapse_dates)
if (length(relapse_dates) > 0) {
relapse_df <- data.frame(split(rep(relapse_dates, each=nrow(data_id)),
rep(1:length(relapse_dates), each=nrow(data_id))))
relapse_df$visit <- data_id[,][['dateEDSS']]
dist <- (relapse_df %>% mutate(across(1:length(relapse_dates),
~ as.numeric(.x - visit))))[1:length(relapse_dates)]
distm <- - dist
distm[distm<0] <- Inf
data_id$daysPostRelapse <- if (all(is.na(distm))) Inf else apply(distm, 1, min, na.rm=TRUE)
}
datak[datak[['ID']] == subjid, ] = data_id
}
View(datak)
filter(datak, daysPostRelapse<Inf)
relapse_df
View(relapse)
View(relapse)
subjid = 1005014
data_id <- datak[datak[['ID']] == subjid, ]
data_id
nvisits <- nrow(data_id)
first_visit <- min(data_id[['dateEDSS']])
relapse_id <- relapse[relapse[[rsubj_col]] == subjid, ]
relapse_dates <- relapse_id[[rdate_col]]
nrel <- length(relapse_dates)
relapse_dates
nrel
(length(relapse_dates) > 0)
relapse_df <- data.frame(split(rep(relapse_dates, each=nrow(data_id)),
rep(1:length(relapse_dates), each=nrow(data_id))))
relapse_df$visit <- data_id[,][['dateEDSS']]
relapse_df
dist <- (relapse_df %>% mutate(across(1:length(relapse_dates),
~ as.numeric(.x - visit))))[1:length(relapse_dates)]
distm <- - dist
dist
dist <- (relapse_df %>% mutate(across(1:length(relapse_dates),
~ difftime(.x, visit))))[1:length(relapse_dates)]
dist
dist <- (relapse_df %>% mutate(across(1:length(relapse_dates),
~ difftime(.x, visit, unit='days'))))[1:length(relapse_dates)]
dist
dist <- (relapse_df %>% mutate(across(1:length(relapse_dates),
~ as.numeric(difftime(.x, visit, unit='days')))))[1:length(relapse_dates)]
dist
distm <- - dist
distm[distm<0] <- Inf
data_id$daysPostRelapse <- if (all(is.na(distm))) Inf else apply(distm, 1, min, na.rm=TRUE)
data_id
datak <- data
names(datak)[names(datak) == subj_col] <- "ID"
names(datak)[names(datak) == date_col] <- "dateEDSS"
names(datak)[names(datak) == value_col] <- "EDSS"
all_subj <- unique(datak[[subj_col]])
datak$daysPostRelapse = Inf
for (subjid in all_subj) {
data_id <- datak[datak[['ID']] == subjid, ]
nvisits <- nrow(data_id)
first_visit <- min(data_id[['dateEDSS']])
relapse_id <- relapse[relapse[[rsubj_col]] == subjid, ]
relapse_dates <- relapse_id[[rdate_col]]
nrel <- length(relapse_dates)
if (length(relapse_dates) > 0) {
relapse_df <- data.frame(split(rep(relapse_dates, each=nrow(data_id)),
rep(1:length(relapse_dates), each=nrow(data_id))))
relapse_df$visit <- data_id[,][['dateEDSS']]
dist <- (relapse_df %>% mutate(across(1:length(relapse_dates),
~ as.numeric(difftime(.x, visit, unit='days')))))[1:length(relapse_dates)]
distm <- - dist
distm[distm<0] <- Inf
data_id$daysPostRelapse <- if (all(is.na(distm))) Inf else apply(distm, 1, min, na.rm=TRUE)
}
datak[datak[['ID']] == subjid, ] = data_id
}
View(datak)
df <- CDEseq(datak)
warnings()
View(df)
datak$bEDSS <- NA
datak$base.date <- NA
df <- CDEseq(datak)
df[[1]]
df1 = df[[1]]
df2 = df[[2]]
View(df1)
# subjects = subj_all[1:100]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
3 * 30.25 / 7
View(df2)
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- 3 * 30.25 / 7 # period before confirmation (weeks)
conf_tol_days <- 0 # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 0
relapse_to_conf <- 0
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- F # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- F # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- NULL # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- F # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- F # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
res <- results(output) #output[[2]] # extended info on event sequence for each subject
count
count <- event_count(output) #output[[1]] # summary of detected events for each subject
View(count)
prk <- df1$ID
View(count)
View(count)
pr <- rownames(filter(count, progression==1))
Reduce(intersect,list(pr, prk))
common_pr <- Reduce(intersect,list(pr, prk))
pr1 <- Reduce(setdiff,list(pr, prk))
pr_k_only <- Reduce(setdiff,list(prk, pr))
pr_msprog_only <- Reduce(setdiff,list(pr, prk))
View(data)
pr_k_only[1]
filter(relapse, SUBJID=='1009017')
View(df)
View(data)
View(df1)
output1 <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=c('1009017'), relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
'1009017' %in% pr
count['1009017',]
pr <- rownames(filter(count, progression>=1))
pr_msprog_only <- Reduce(setdiff,list(pr, prk))
pr_k_only <- Reduce(setdiff,list(prk, pr))
filter(data, subjid=='1010005')
filter(data, SUBJID=='1010005')
filter(prk, ID=='1010005')
filter(df1, ID=='1010005')
output1 <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=c('1010005'), relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
library(MSoutcomes)
citation(“MSoutcomes”)
citation('MSoutcomes')
