if (!is.null(subjects)) {
data <- data[data[[subj_col]] %in% subjects,]
relapse <- relapse[relapse[[rsubj_col]] %in% subjects,]
}
# Check if values are in correct range
if (outcome!='outcome') {
if (any(data[[value_col]]<0)) {
stop('negative ', outcome,' scores')
}
else if (outcome=='edss' & any(data[[value_col]]>10)) {
stop('EDSS scores >10')
}
else if (outcome=='sdmt' & any(data[[value_col]]>110)) {
stop('SDMT scores >110')
}
else if (outcome=='nhpt' & any(data[[value_col]]>300)) {
warnings <- c(warnings, 'NHPT scores >300')
}
else if (outcome=='t25fw' & any(data[[value_col]]>180)) {
warnings <- c(warnings, 'T25FW scores >180')
}
}
# Set minimum value
if (is.null(min_value)) {
min_value_ifany <- -Inf
} else {
min_value_ifany <- min_value
}
# If prog_last_visit==T, set no limit to follow-up length (Inf)
if (prog_last_visit==T) {
prog_last_visit <- Inf
}
# Set direction of worsening
if (outcome %in% c('edss', 'nhpt', 't25fw')) {
worsening <- 'increase'
} else if (outcome=='sdmt') {
worsening <- 'decrease'
} else if (is.null(worsening)) {
stop('Either specify an outcome type, or specify the direction of worsening (\'increase\' or \'decrease\')')
}
# Define local is_event() function
isevent_loc <- function(x, baseline, type='prog', st=F) {
is_event(x, baseline, type=type, outcome=outcome, worsening=worsening,
sub_threshold=st, delta_fun=delta_fun)
}
# Define a confirmation window for each value of conf_weeks
if (conf_unbounded_right) {
conf_tol_days[2] <- Inf
}
conf_window <- lapply(conf_weeks, function(t) {
lower <- as.integer(t * 7) - conf_tol_days[1]
# if (conf_unbounded_right) {
#   upper <- Inf
# } else {
upper <- as.integer(t * 7) + conf_tol_days[2]
# }
return(c(lower, upper))
})
relapse_indep
if (is.null(relapse_indep)) {
relapse_indep <- relapse_indep_from_bounds(0,0,90,30,90,30)
}
relapse_indep
all_subj <- unique(data[[subj_col]])
nsub <- length(all_subj)
nsub
max_nevents <- round(max(table(data[[subj_col]]))/2)
results_df <- data.frame(matrix(nrow=nsub*max_nevents, ncol=10+length(conf_weeks)*2+2)) #length(conf_weeks) + (length(conf_weeks)-1)
allcol <- c(subj_col, 'nevent', 'event_type', 'bldate', 'blvalue', 'date', 'value', 'total_fu', 'time2event',
'bl2event', paste0('conf', conf_weeks), paste0('PIRA_conf', conf_weeks), 'sust_days', 'sust_last')
data = toydata_visits
relapse = toydata_relapses
output <- MSprog(toydata_visits, subj_col='id', value_col='EDSS', date_col='date', outcome=outcome, subjects=subjects, date_format=date_format,
relapse=toydata_relapses,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, check_intermediate=check_intermediate,
relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event, relapse_to_conf=relapse_to_conf,
relapse_assoc=relapse_assoc, relapse_indep=relapse_indep, event=event, baseline=baseline,
sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, include_dates=include_dates, include_stable=include_stable,
include_value=include_value, verbose=verbose)
length(data)
nrow(data)
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'CLINICAL_EDSS_Score_Observed'
date_col <- 'VISIT_Date' #VISIT_Date'
rdate_col <- 'CLINICAL_Visit_Date' #'VISIT_Date'
subj_col <- 'SUBJECT_Number_ANONYM' #'RID'
rsubj_col <- 'SUBJECT_Number_ANONYM' #'RID'
trial_col = 'TRIAL_Name'
date_format <- NULL
# Progression settings
outcome <- 'edss'
event <- 'firstprog'
baseline <- 'fixed'
conf_weeks <- 24
conf_tol_days <- c(0,830)
conf_unbounded_right <- F
require_sust_weeks <- 96
prog_last_visit <- 84
check_intermediate <- F
relapse_to_bl <- 74
relapse_to_event <- 0
relapse_to_conf <- 74
relapse_assoc <- 90
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- F
relapse_rebl <- F
min_value <- NULL
include_dates <- T
include_value <- T
include_stable <- T
verbose <- 1
# Custom delta function
delta_fun <- function(baseline) {
if (baseline >= 0 & baseline <= 5.5) {
return(1)
} else if (baseline > 5.5 & baseline <= 10) {
return(0.5)
} else {
stop('invalid EDSS score')
}
}
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MS-therapeutic_lag_data/prog.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MS-therapeutic_lag_data/prog_relapse.xlsx")
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
data1 <- data[data[trial_col]=='ASCEND',]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
subjects = subj_all[1:100]
# subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, date_format=date_format,
relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, check_intermediate=check_intermediate,
relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event, relapse_to_conf=relapse_to_conf,
relapse_assoc=relapse_assoc, relapse_indep=relapse_indep, event=event, baseline=baseline,
sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, include_dates=include_dates, include_stable=include_stable,
include_value=include_value, verbose=verbose)
count <- output$event_count
res <- output$results
s = output$prog_settings
print(count)
print(res)
print(output)
View(data)
trial_col
group_col
View(data)
subj_gr <- filter(data1, SUBJECT_Trial_arm==gr)[[subj_col]
}
for (gr in unique(data['SUBJECT_Trial_arm'])) {
subj_gr <- filter(data1, SUBJECT_Trial_arm==gr)[[subj_col]]
print(gr, ': ', sum(count[subj_gr, 'progression']))
}
View(data1)
for (gr in unique(data1['SUBJECT_Trial_Arm'])) {
subj_gr <- filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]]
print(gr, ': ', sum(count[subj_gr, 'progression']))
}
gr
unique(data1['SUBJECT_Trial_Arm'])
unique(data1[['SUBJECT_Trial_Arm']])
for (gr in unique(data1[['SUBJECT_Trial_Arm']])) {
subj_gr <- filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]]
print(gr, ': ', sum(count[subj_gr, 'progression']))
}
gr
subj_gr
count[subj_gr, 'progression']
length(subj_gr)
length(count[subj_gr, 'progression'])
subj_gr[601]
count["6RhvQytGowvzlpBF",]
# subj_all = unique(data[[subj_col]])
# subjects = subj_all[1:100]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, date_format=date_format,
relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, check_intermediate=check_intermediate,
relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event, relapse_to_conf=relapse_to_conf,
relapse_assoc=relapse_assoc, relapse_indep=relapse_indep, event=event, baseline=baseline,
sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, include_dates=include_dates, include_stable=include_stable,
include_value=include_value, verbose=verbose)
count <- output$event_count
res <- output$results
for (gr in unique(data1[['SUBJECT_Trial_Arm']])) {
subj_gr <- filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]]
print(gr, ': ', sum(count[subj_gr, 'progression']))
}
length(subj_gr)
length(count)
nrow(count)
gr
unique(data1[['SUBJECT_Trial_Arm']])
gr = 'placebo'
subj_gr <- filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]]
length(count)
length(subj_gr)
subj_all = unique(data1[[subj_col]])
length(subj_all)
subj_gr <- unique(filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]]
print(gr, ': ', sum(count[subj_gr, 'progression']))
subj_gr <- unique(filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]])
subj_gr
print(gr, ': ', sum(count[subj_gr, 'progression']))
length(subj_gr)
gr = 'natalizumab'
subj_gr <- unique(filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]])
length(subj_gr)
length(subj_all)
for (gr in unique(data1[['SUBJECT_Trial_Arm']])) {
subj_gr <- unique(filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]])
print(gr, ': ', sum(count[subj_gr,][['progression']]))
}
count[subj_gr,]
nrow(count[subj_gr,])
count[subj_gr,][[430]]
aa = count[subj_gr,]
View(aa)
aa = count[subj_gr, 'progression']
View(count)
count[subj_gr,][[,'progression']]
for (gr in unique(data1[['SUBJECT_Trial_Arm']])) {
subj_gr <- unique(filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]])
print(gr, ': ', sum(count[subj_gr, 'progression']))
}
sum(count[subj_gr, 'progression'])
print(paste0(gr, ': ', sum(count[subj_gr, 'progression'])))
cat(gr, ': ', sum(count[subj_gr, 'progression']))
for (gr in unique(data1[['SUBJECT_Trial_Arm']])) {
subj_gr <- unique(filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]])
cat(gr, ':', sum(count[subj_gr, 'progression']))
}
for (gr in unique(data1[['SUBJECT_Trial_Arm']])) {
subj_gr <- unique(filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]])
cat('\n', gr, ':', sum(count[subj_gr, 'progression']))
}
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'CLINICAL_EDSS_Score_Observed'
date_col <- 'VISIT_Date' #VISIT_Date'
rdate_col <- 'CLINICAL_Visit_Date' #'VISIT_Date'
subj_col <- 'SUBJECT_Number_ANONYM' #'RID'
rsubj_col <- 'SUBJECT_Number_ANONYM' #'RID'
trial_col = 'TRIAL_Name'
date_format <- NULL
# Progression settings
outcome <- 'edss'
event <- 'firstprog'
baseline <- 'fixed'
conf_weeks <- 24
conf_tol_days <- c(0,30)
conf_unbounded_right <- F
require_sust_weeks <- 96
prog_last_visit <- 84
check_intermediate <- F
relapse_to_bl <- 74
relapse_to_event <- 0
relapse_to_conf <- 74
relapse_assoc <- 90
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- F
relapse_rebl <- F
min_value <- NULL
include_dates <- T
include_value <- T
include_stable <- T
verbose <- 1
# Custom delta function
delta_fun <- function(baseline) {
if (baseline >= 0 & baseline <= 5.5) {
return(1)
} else if (baseline > 5.5 & baseline <= 10) {
return(0.5)
} else {
stop('invalid EDSS score')
}
}
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MS-therapeutic_lag_data/prog.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MS-therapeutic_lag_data/prog_relapse.xlsx")
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
data1 <- data[data[trial_col]=='ASCEND',]
#####################################################################################
# Compute progression
# subj_all = unique(data1[[subj_col]])
# subjects = subj_all[1:100]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, date_format=date_format,
relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, check_intermediate=check_intermediate,
relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event, relapse_to_conf=relapse_to_conf,
relapse_assoc=relapse_assoc, relapse_indep=relapse_indep, event=event, baseline=baseline,
sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, include_dates=include_dates, include_stable=include_stable,
include_value=include_value, verbose=verbose)
count <- output$event_count
res <- output$results
for (gr in unique(data1[['SUBJECT_Trial_Arm']])) {
subj_gr <- unique(filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]])
cat('\n', gr, ':', sum(count[subj_gr, 'progression']))
}
s = output$prog_settings
print(count)
print(res)
print(output)
for (gr in unique(data1[['SUBJECT_Trial_Arm']])) {
subj_gr <- unique(filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]])
cat('\n', gr, ':', sum(count[subj_gr, 'progression']))
}
6*30.4/7
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'CLINICAL_EDSS_Score_Observed'
date_col <- 'VISIT_Date' #VISIT_Date'
rdate_col <- 'CLINICAL_Visit_Date' #'VISIT_Date'
subj_col <- 'SUBJECT_Number_ANONYM' #'RID'
rsubj_col <- 'SUBJECT_Number_ANONYM' #'RID'
trial_col = 'TRIAL_Name'
date_format <- NULL
# Progression settings
outcome <- 'edss'
event <- 'firstprog'
baseline <- 'fixed'
conf_weeks <- 6*30.4/7
conf_tol_days <- c(0,30)
conf_unbounded_right <- F
require_sust_weeks <- 96
prog_last_visit <- 84
check_intermediate <- F
relapse_to_bl <- 74
relapse_to_event <- 0
relapse_to_conf <- 74
relapse_assoc <- 90
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- F
relapse_rebl <- F
min_value <- NULL
include_dates <- T
include_value <- T
include_stable <- T
verbose <- 1
# Custom delta function
delta_fun <- function(baseline) {
if (baseline >= 0 & baseline <= 5.5) {
return(1)
} else if (baseline > 5.5 & baseline <= 10) {
return(0.5)
} else {
stop('invalid EDSS score')
}
}
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MS-therapeutic_lag_data/prog.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MS-therapeutic_lag_data/prog_relapse.xlsx")
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
data1 <- data[data[trial_col]=='ASCEND',]
#####################################################################################
# Compute progression
# subj_all = unique(data1[[subj_col]])
# subjects = subj_all[1:100]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, date_format=date_format,
relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, check_intermediate=check_intermediate,
relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event, relapse_to_conf=relapse_to_conf,
relapse_assoc=relapse_assoc, relapse_indep=relapse_indep, event=event, baseline=baseline,
sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, include_dates=include_dates, include_stable=include_stable,
include_value=include_value, verbose=verbose)
count <- output$event_count
res <- output$results
s = output$prog_settings
print(count)
print(res)
print(output)
for (gr in unique(data1[['SUBJECT_Trial_Arm']])) {
subj_gr <- unique(filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]])
cat('\n', gr, ':', sum(count[subj_gr, 'progression']))
}
conf_weeks
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'CLINICAL_EDSS_Score_Observed'
date_col <- 'VISIT_Date' #VISIT_Date'
rdate_col <- 'CLINICAL_Visit_Date' #'VISIT_Date'
subj_col <- 'SUBJECT_Number_ANONYM' #'RID'
rsubj_col <- 'SUBJECT_Number_ANONYM' #'RID'
trial_col = 'TRIAL_Name'
date_format <- NULL
# Progression settings
outcome <- 'edss'
event <- 'firstprog'
baseline <- 'fixed'
conf_weeks <- 24
conf_tol_days <- c(0,30)
conf_unbounded_right <- F
require_sust_weeks <- 96
prog_last_visit <- 84
check_intermediate <- F
relapse_to_bl <- 74
relapse_to_event <- 0
relapse_to_conf <- 74
relapse_assoc <- 90
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- F
relapse_rebl <- F
min_value <- NULL
include_dates <- T
include_value <- T
include_stable <- T
verbose <- 1
# Custom delta function
delta_fun <- function(baseline) {
if (baseline >= 0 & baseline <= 5.5) {
return(1)
} else if (baseline > 5.5 & baseline <= 10) {
return(0.5)
} else {
stop('invalid EDSS score')
}
}
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MS-therapeutic_lag_data/prog.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MS-therapeutic_lag_data/prog_relapse.xlsx")
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
data1 <- data[data[trial_col]=='ASCEND',]
#####################################################################################
# Compute progression
# subj_all = unique(data1[[subj_col]])
# subjects = subj_all[1:100]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, date_format=date_format,
relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, check_intermediate=check_intermediate,
relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event, relapse_to_conf=relapse_to_conf,
relapse_assoc=relapse_assoc, relapse_indep=relapse_indep, event=event, baseline=baseline,
sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, include_dates=include_dates, include_stable=include_stable,
include_value=include_value, verbose=verbose)
count <- output$event_count
res <- output$results
s = output$prog_settings
print(count)
print(res)
print(output)
for (gr in unique(data1[['SUBJECT_Trial_Arm']])) {
subj_gr <- unique(filter(data1, SUBJECT_Trial_Arm==gr)[[subj_col]])
cat('\n', gr, ':', sum(count[subj_gr, 'progression']))
}
