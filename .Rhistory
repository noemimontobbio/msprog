family=binomial(), data=data_edu, control=optimizer)
M = m0a # more complex model
M = m00a # more complex model
m = m0 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
cat(as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0), 'BIC',
specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #      <------M
cat(as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0), 'BIC',
specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #      <------m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) #             <------M - m
#
m00a = glmer(Accuracy ~ Age + Group*Time:piecewise1s + piecewise1s + Block*Group + (1+Time|Subject),
family=binomial(), data=data_edu, control=optimizer)
M = m00a # more complex model
m = m0 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
cat(as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0), 'BIC',
specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #      <------M
cat(as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0), 'BIC',
specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #      <------m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) #             <------M - m
#
m00 = glmer(Accuracy ~ Edu + Age + Group*Time:piecewise1s + piecewise1s + Block*Group + (1+Time|Subject),
family=binomial(), data=data_clean, control=optimizer)
#
#
#
m0 = glmer(Accuracy ~ Edu + Age + Time:piecewise1s + piecewise1s + Block*Group + (1+Time|Subject), #Group:(Time:piecewise)
family=binomial(), data=data_clean, control=optimizer)
m0b = glmer(Accuracy ~ Age + Time:piecewise1s + piecewise1s + Block*Group + (1+Time|Subject), #Group:(Time:piecewise)
family=binomial(), data=data_edu, control=optimizer)
m00b = glmer(Accuracy ~ Edu + Age + Group*Time:piecewise1s + piecewise1s + Block*Group + (1+Time|Subject),
family=binomial(), data=data_edu, control=optimizer)
M = m00b # more complex model
m = m0b # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
cat(as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0), 'BIC',
specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #      <------M
cat(as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0), 'BIC',
specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #      <------m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) #
M = m00 # more complex model
m = m1 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
cat(as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0), 'BIC',
specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #      <------M
cat(as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0), 'BIC',
specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #      <------m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) #
#
m2 = glmer(Accuracy ~ Edu + Age + Group:Time:piecewise1s + piecewise1s + Block + (1+Time|Subject), #Group
family=binomial(), data=data_clean, control=optimizer)
m3 = glmer(Accuracy ~ Edu + Age + Group*Time:piecewise1s + piecewise1s + (1+Time|Subject), #Block
family=binomial(), data=data_clean, control=optimizer)
m4 = glmer(Accuracy ~ Edu + Age + Group*Time:piecewise1s + Block + (1+Time|Subject), #piecewise1s
family=binomial(), data=data_clean, control=optimizer)
m5 = glmer(Accuracy ~ Edu + Group*Time:piecewise1s + piecewise1s + Group + Block + (1+Time|Subject), #Age
family=binomial(), data=data_clean, control=optimizer)
m6a = glmer(Accuracy ~ Age + Group:Time:piecewise1s + piecewise1s + Group + Block + (1+Time|Subject), #Edu
family=binomial(), data=data_edu, control=optimizer)
m1a = glmer(Accuracy ~ Edu + Age + Group:Time:piecewise1s + piecewise1s + Group + Block + (1+Time|Subject), #Group:Block
family=binomial(), data=data_edu, control=optimizer)
M = m1 # more complex model
m = m2 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
# cat(as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0), 'BIC',
#     specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #      <------M
# cat(as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0), 'BIC',
#     specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #      <------m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) #
M = m1 # more complex model
m = m3 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
# cat(as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0), 'BIC',
#     specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #      <------M
# cat(as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0), 'BIC',
#     specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #      <------m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) #             <------M - m
M = m1 # more complex model
m = m4 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
# cat(as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0), 'BIC',
#     specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #      <------M
# cat(as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0), 'BIC',
#     specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #      <------m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) #             <------M - m
M = m1 # more complex model
m = m5 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
# cat(as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0), 'BIC',
#     specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #      <------M
# cat(as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0), 'BIC',
#     specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #      <------m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) #             <------M - m
M = m1a # more complex model
m = m6a # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
# cat(as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0), 'BIC',
#     specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #      <------M
# cat(as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0), 'BIC',
#     specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #      <------m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) #             <------M - m
anova(m1a,m6a)
m6a = glmer(Accuracy ~ Age + Group:Time:piecewise1s + piecewise1s + Group + Block + (1+Time|Subject), #Edu
family=binomial(), data=data_edu, control=optimizer)
m1a = glmer(Accuracy ~ Edu + Age + Group:Time:piecewise1s + piecewise1s + Group + Block + (1+Time|Subject), #Group:Block
family=binomial(), data=data_edu, control=optimizer)
m00 = glmer(RelConf ~ Edu + Age + Group*piecewise1s + (1+Time|Subject) + (1|Block),
family=Gamma(), data=data_clean) #(1+piecewise1s|Subject) # (1+Time|Subject)
m01 = glmer(RelConf ~ Edu + Age + Group*piecewise1s + (1|Subject) + (1|Block), family=Gamma(), data=data_clean)
m02 = glmer(RelConf ~ Edu + Age + Group*piecewise1s + (1|Block), family=Gamma(), data=data_clean)
m03 = glmer(RelConf ~ Edu + Age + Group*piecewise1s + (1+Time|Subject), family=Gamma(), data=data_clean) #(1+piecewise1s|Subject) #(1+Time|Subject)
m04 = glmer(RelConf ~ Edu + Age + Group*piecewise1s + (1|Subject), family=Gamma(), data=data_clean)
m05 = glm(RelConf ~ Edu + Age + Group*piecewise1s, family=Gamma(), data=data_clean)
models = c('m00', 'm01', 'm02', 'm03', 'm04', 'm05')
bics = c(BIC(m00), BIC(m01), BIC(m02), BIC(m03), BIC(m04), BIC(m05))
index = which.min(bics)
sprintf('Model with lowest BIC: %s (BIC=%.2f)', models[index], min(bics)) #m00
#
#
m0 = glmer(RelConf ~ Edu + Age + piecewise1s + Group + (1+Time|Subject) + (1|Block),  #(1+piecewise1s|Subject) #(1+Time|Subject)
family=Gamma(), data=data_clean) #Group:piecewise1s
#
m1 = glmer(RelConf ~ Edu + piecewise1s*Group + (1+Time|Subject) + (1|Block),  #(1+piecewise1s|Subject) #(1+Time|Subject)
family=Gamma(), data=data_clean) #Age
m2a = glmer(RelConf ~ Age + piecewise1s*Group + (1+Time|Subject) + (1|Block),  #(1+piecewise1s|Subject) #(1+Time|Subject)
family=Gamma(), data=data_edu) #Edu
m00a = glmer(RelConf ~ Edu + Age + Group*piecewise1s + (1+Time|Subject) + (1|Block),
family=Gamma(), data=data_edu)
View(data_clean)
View(data_clean)
View(data_clean)
View(data_clean)
M = m00 # more complex model
m = m01 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
cat(as.character(formula(M))[2], '~', as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0),
'BIC', specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #M
cat(as.character(formula(M))[2], '~', as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0),
'BIC', specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) # M - m
M = m00 # more complex model
m = m02 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
# cat(as.character(formula(M))[2], '~', as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0),
#     'BIC', specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #M
cat(as.character(formula(M))[2], '~', as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0),
'BIC', specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #m
M = m00 # more complex model
m = m03 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
# cat(as.character(formula(M))[2], '~', as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0),
#     'BIC', specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #M
cat(as.character(formula(M))[2], '~', as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0),
'BIC', specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #m
M = m00 # more complex model
m = m04 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
# cat(as.character(formula(M))[2], '~', as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0),
#     'BIC', specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #M
cat(as.character(formula(M))[2], '~', as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0),
'BIC', specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #m
anova(m00,m05)
M = m00 # more complex model
m = m0 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
# cat(as.character(formula(M))[2], '~', as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0),
#     'BIC', specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #M
# cat(as.character(formula(M))[2], '~', as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0),
#     'BIC', specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) # M - m
M = m00 # more complex model
m = m1 # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
# cat(as.character(formula(M))[2], '~', as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0),
#     'BIC', specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #M
# cat(as.character(formula(M))[2], '~', as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0),
#     'BIC', specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) # M - m
m = m2 # less complex model
comp = anova(m,M)
M = m00a # more complex model
m = m2a # less complex model
comp = anova(m,M)
npar = c(comp['M','npar'], comp['m','npar']) #find a way to compute degrees of freedom directly from model!!
# dfdiff = anova(m,M)$Df[2]
bics = c(BIC(M), BIC(m))
devs = c(-2*logLik(M), -2*logLik(m))
p = anova(m,M)[,'Pr(>Chisq)'][2]
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
# cat(as.character(formula(M))[2], '~', as.character(formula(M))[3], '\ndf', specify_decimal(npar[1], 0),
#     'BIC', specify_decimal(bics[1], 0), 'dev', specify_decimal(devs[1], 0)) #M
# cat(as.character(formula(M))[2], '~', as.character(formula(m))[3], '\ndf', specify_decimal(npar[2], 0),
#     'BIC', specify_decimal(bics[2], 0), 'dev', specify_decimal(devs[2], 0)) #m
cat('df', specify_decimal(npar, 0), 'BIC', specify_decimal(bics, 0), 'dev',
specify_decimal(devs, 0), 'p', specify_decimal(p, 3)) # M - m
#
# LINK PER SCARICARE PROGRAMMINO:
# install.packages("devtools")
# devtools::install_github("noemimontobbio/msprog", build_vignettes=TRUE)
library(msprog)
library(BuyseTest)
library(data.table)
library(survival)
library(sas7bdat)
library(xlsx)
library(survminer)
library(MASS)
library(readxl)
library(dplyr)
library(tidyverse)
library(purrr)
?MSprog
??MSprog
# import data
edss<-read.sas7bdat(file="/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/laquinimod/EDSSABC.sas7bdat")
names(edss)
table(edss$PROTOCOL)
edss$VISITDA <- as.Date(edss$VISITDA, origin='1960-01-01')
relapse<-read.sas7bdat(file="/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/laquinimod/RELAPSEABC.sas7bdat")
names(relapse)
relapse$VISITDA <- as.Date(relapse$VISITDA, origin='1960-01-01')
baseline<- read.sas7bdat(file="/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/laquinimod/allegrobravoconcerto_definitivo.sas7bdat")
names(baseline)
baseline$rel<-log(1+baseline$EX2YRN)
edssb<-subset(edss, PROTOCOL=="MS-LAQ-302")
relapseb<-subset(relapse, PROTOCOL=="MS-LAQ-302")
baselineb<-subset(baseline, STUDY==2)
###############################################################
delta_fun <- function(baseline) {
if (baseline >= 0 & baseline < 5.5) {
return(1)
} else if (baseline >= 5.5 & baseline <= 10) {
return(0.5)
} else {
stop('invalid EDSS score')
} }
###############################################################
outputedssok <- MSprog(edssb,
subj_col="PAT", value_col="CNVEDSS", date_col="VISITDA",
relapse=relapseb, outcome="edss",
delta_fun = delta_fun,
conf_tol_days=0,
conf_unbounded_right=T,
relapse_to_conf=1,
conf_weeks=12,
verbose=2
)
printedssb<- print(outputedssok[[2]], row.names = FALSE) # results
bravo <- dplyr::left_join(baselineb, printedssb, by = "PAT")
names(bravo)
# progressione originale
cox.edss <- coxph(Surv(DAYPROG, CONFRPR) ~ ARM + BCNVEDSS + COUNTRY +rel, data =  bravo)
summary(cox.edss)
# progressione calcolata
bravo$time2event <- bravo$time2event+1
cox.edss <- coxph(Surv(time2event, nevent) ~ ARM + BCNVEDSS + COUNTRY +rel, data =  bravo)
summary(cox.edss)
# differenze tra originale e calcolato:
table(bravo$CONFRPR,bravo$nevent)
# eventi per braccio:
table(bravo$CONFRPR,bravo$ARM)
table(bravo$nevent,bravo$ARM)
check2<-subset(bravo,CONFRPR != nevent)
check2 <- subset(check2, select = c(PAT,DRUGNUM_,CONFRPR,DAYPROG,nevent,time2event))
rm(list=ls())
library(readxl)
library(dplyr)
library(msprog)
# source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
# source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/compute_delta.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
subjects <- NULL # (optional) subset of subjects (if NULL, compute on all subjects)
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- 45 # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- FALSE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 30
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- FALSE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- FALSE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- 0 # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- FALSE # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
rm(list=ls())
library(readxl)
library(dplyr)
library(msprog)
# source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
# source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/compute_delta.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
subjects <- NULL # (optional) subset of subjects (if NULL, compute on all subjects)
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- 45 # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- FALSE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 30
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- FALSE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- FALSE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- 0 # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- FALSE # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
summary = output[[1]] # summary of detected events for each subject
results = output[[2]] # extended info on event sequence for each subject
#####################################################################################
# Create toy data
# toydata_visits = read_excel("/Users/nmontobbio/code/DATA/MSprog_toydata.xlsx", sheet='visits')
# toydata_visits$id = as.character(toydata_visits$id)
# toydata_visits$date = as.Date(toydata_visits$date)
# toydata_relapses = read_excel("/Users/nmontobbio/code/DATA/MSprog_toydata.xlsx", sheet='relapses')
# toydata_relapses$id = as.character(toydata_relapses$id)
# toydata_relapses$date = as.Date(toydata_relapses$date)
# save(toydata_visits, file="data/toydata_visits.RData")
# save(toydata_relapses, file="data/toydata_relapses.RData")
rm(list=ls())
library(msprog)
library(BuyseTest)
library(data.table)
library(survival)
library(sas7bdat)
library(xlsx)
library(survminer)
library(MASS)
library(readxl)
library(dplyr)
library(tidyverse)
library(purrr)
?MSprog
??MSprog
edss<-read.sas7bdat(file="/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/laquinimod/EDSSABC.sas7bdat")
str(edssb)
str(edss)
