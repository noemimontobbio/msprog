' value was too small to define a valid event. ', # (e.g., a confirmed change from
#outcome, '=', s$bl_value, ' to ', outcome, '=', s$bl_value + round(delta(s$bl_value)/2), '). '
),
''), ifelse(s$relapse_to_bl>0, paste0('Whenever the baseline fell within ', s$relapse_to_bl,
' days from a relapse, it was moved to the next available visit. '), ''),
sep='')
),
ifelse(s$relapse_rebl, 'A further search for PIRA events was performed by resetting the baseline to the virst valid visit after each relapse. ',
''),
sep='')
paste0('The baseline was also moved when the (confirmed) shift in the ', outcome,
' value was too small to define a valid event. ' # (e.g., a confirmed change from
#outcome, '=', s$bl_value, ' to ', outcome, '=', s$bl_value + round(delta(s$bl_value)/2), '). '
)
outcome <- ifelse(s$outcome=='outcome', 'outcome', toupper(s$outcome))
delta <- function(value) {
if (is.null(s$delta_fun)) {
return(s$compute_delta(value, s$outcome))
} else {
return(s$delta_fun(value))
}
}
if (startsWith(s$event, 'firstprog')) {
event_text <- paste0('the first ', outcome, ' progression event')
} else if (s$event=='first') {
event_text <- paste0('the first ', outcome, ' progression or improvement event')
} else if (s$event=='firsteach') {
event_text <- paste0('the first ', outcome, ' progression and the first ',
outcome, ' improvement event (in chronological order) -')
} else if (s$event=='firstprogtype') {
event_text <- paste0('the first ', outcome,
' progression event of each kind - PIRA, RAW, and undefined (in chronological order) -')
} else if (s$event=='firstPIRA') {
event_text <- paste0('the first ', outcome,' PIRA event')
} else if (s$event=='firstRAW') {
event_text <- paste0('the first ', outcome, ' RAW event')
} else if (s$event=='multiple') {
event_text <- paste0('all ', outcome, ' changes (in chronological order)')
}
pira_text <- ''
for (point in c('bl', 'event', 'conf')) {
if (!(is.null(s$relapse_indep[[point]][[1]]) & is.null(s$relapse_indep[[point]][[2]]))
& !((!is.null(s$relapse_indep[[point]][[1]]) && (s$relapse_indep[[point]][[1]]==0))
& (!is.null(s$relapse_indep[[point]][[2]]) && (s$relapse_indep[[point]][[2]]==0)))) {
pp <- ifelse(point=='bl', 'baseline', ifelse(point=='event', 'the event', 'confirmation'))
pira_text <- paste0(pira_text, ifelse(!is.null(s$relapse_indep[[point]][[1]]), paste0('from ',
ifelse(s$relapse_indep[[point]][[1]]>0, paste0(s$relapse_indep[[point]][[1]], ' days before '), ''),
pp), ''))
pira_text <-  paste0(pira_text, ifelse(!is.null(s$relapse_indep[[point]][[2]]), paste0(' to ',
ifelse(s$relapse_indep[[point]][[2]]>0, paste0(s$relapse_indep[[point]][[2]], ' days after '), ''),
pp, ', or '), ''))
}
}
pira_text <- gsub('.{5}$', '', pira_text)
text <- paste0(
'For each subject, we detected ', event_text, ' confirmed at ', paste0(s$conf_weeks, collapse=" or "),
' weeks', ifelse(s$conf_unbounded_right, ' or more', ''),
ifelse(s$conf_tol_days[1]>0, paste0(', with a tolerance of ', s$conf_tol_days[1],
ifelse(s$conf_tol_days[1]==s$conf_tol_days[2], ' days on both sides', paste0(' days on the left',
ifelse(s$conf_unbounded_right, '', paste0(' and ', s$conf_tol_days[2], ' on the right')),
sep=''))),
ifelse(s$conf_unbounded_right, '', paste0(', with a tolerance of ',
s$conf_tol_days[2], ' days on the right'))), '. ',
ifelse(s$relapse_to_conf>0, paste0('A visit could only be used as confirmation if occurring at least ',
s$relapse_to_conf, ' days from a relapse. '), ''),
ifelse(s$prog_last_visit>0, paste0('Progressions ',
ifelse(s$prog_last_visit<Inf, paste0('of patients terminating follow-up before week ',
s$prog_last_visit, ' '), ''),
'were included if occurring at the last available visit without confirmation. '), ''),
ifelse(s$require_sust_weeks>0, paste0('Events were only retained if sustained for either ',
s$require_sust_weeks, ' weeks, or until the end of follow-up. '), ''),
ifelse(s$relapse_to_event>0, paste0('Events occurring within ', s$relapse_to_event,
' days from a relapse were discarded. '), ''),
ifelse(!is.null(s$min_value), paste0('Only progressions to ', outcome,
' values of at least ', s$min_value,
' were retained. '), ''),
ifelse(s$event!='firstPIRA', paste0('A confirmed ', outcome, ' progression event was labelled as RAW if occurring within ',
s$relapse_assoc, ' days from a relapse. '), ''),
ifelse(s$event!='firstRAW', paste0('A confirmed ', outcome,
' progression event was labelled as PIRA if no relapses occurred in the interval ',
pira_text, '. '), ''),
sep='')
text <- paste0(text,
ifelse(s$baseline=='fixed',
paste0('The baseline was kept fixed at the first visit',
ifelse(s$relapse_to_bl>0, paste0(' occurring at least ', s$relapse_to_bl, ' days from a relapse. '), '. ')),
paste0('A roving baseline scheme was applied where the reference value was ',
ifelse(s$baseline=='roving_impr',
'updated every time the value was lower than the previous measure and confirmed. ',
'updated after each confirmed progression or improvement event. '),
'The new reference value was set as the ', outcome, ' value at the confirmation visit. ',
ifelse(s$sub_threshold,
paste0('The baseline was also moved when the (confirmed) shift in the ', outcome,
' value was too small to define a valid event. ' # (e.g., a confirmed change from
#outcome, '=', s$bl_value, ' to ', outcome, '=', s$bl_value + round(delta(s$bl_value)/2), '). '
),
''), ifelse(s$relapse_to_bl>0, paste0('Whenever the baseline fell within ', s$relapse_to_bl,
' days from a relapse, it was moved to the next available visit. '), ''),
sep='')
),
ifelse(s$relapse_rebl, 'A further search for PIRA events was performed by resetting the baseline to the virst valid visit after each relapse. ',
''),
sep='')
cat(text)
names(event_count(output))
scolumns = names(event_count(output))
scolumns[-'improvement']
scolumns[-improvement]
scolumns[scolumns!='improvement']
c('event_sequence', 'PIRA')
names(results)
names(results(output))
library(msprog)
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/compute_delta.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'first'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- TRUE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- 3 # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- TRUE # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
subjects = subj_all[1:10]
# subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count <- event_count(output) #output[[1]] # summary of detected events for each subject
res <- results(output) #output[[2]] # extended info on event sequence for each subject
s = output$prog_settings
print(count)
print(res)
criteria_text(output)
#####################################################################################
# Create toy data
# toydata_visits = read_excel("/Users/nmontobbio/code/DATA/MSprog_toydata.xlsx", sheet='visits')
# toydata_visits$id = as.character(toydata_visits$id)
# toydata_visits$date = as.Date(toydata_visits$date)
# toydata_relapses = read_excel("/Users/nmontobbio/code/DATA/MSprog_toydata.xlsx", sheet='relapses')
# toydata_relapses$id = as.character(toydata_relapses$id)
# toydata_relapses$date = as.Date(toydata_relapses$date)
# save(toydata_visits, file="data/toydata_visits.RData")
# save(toydata_relapses, file="data/toydata_relapses.RData")
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/compute_delta.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'firstprog'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- TRUE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- 3 # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- TRUE # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
subjects = subj_all[1:10]
# subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count <- event_count(output) #output[[1]] # summary of detected events for each subject
res <- results(output) #output[[2]] # extended info on event sequence for each subject
s = output$prog_settings
print(count)
print(res)
criteria_text(output)
#####################################################################################
# Create toy data
# toydata_visits = read_excel("/Users/nmontobbio/code/DATA/MSprog_toydata.xlsx", sheet='visits')
# toydata_visits$id = as.character(toydata_visits$id)
# toydata_visits$date = as.Date(toydata_visits$date)
# toydata_relapses = read_excel("/Users/nmontobbio/code/DATA/MSprog_toydata.xlsx", sheet='relapses')
# toydata_relapses$id = as.character(toydata_relapses$id)
# toydata_relapses$date = as.Date(toydata_relapses$date)
# save(toydata_visits, file="data/toydata_visits.RData")
# save(toydata_relapses, file="data/toydata_relapses.RData")
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/compute_delta.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'firsteach'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- TRUE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- 3 # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- TRUE # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
subjects = subj_all[1:10]
# subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count <- event_count(output) #output[[1]] # summary of detected events for each subject
res <- results(output) #output[[2]] # extended info on event sequence for each subject
s = output$prog_settings
print(count)
print(res)
criteria_text(output)
#####################################################################################
# Create toy data
# toydata_visits = read_excel("/Users/nmontobbio/code/DATA/MSprog_toydata.xlsx", sheet='visits')
# toydata_visits$id = as.character(toydata_visits$id)
# toydata_visits$date = as.Date(toydata_visits$date)
# toydata_relapses = read_excel("/Users/nmontobbio/code/DATA/MSprog_toydata.xlsx", sheet='relapses')
# toydata_relapses$id = as.character(toydata_relapses$id)
# toydata_relapses$date = as.Date(toydata_relapses$date)
# save(toydata_visits, file="data/toydata_visits.RData")
# save(toydata_relapses, file="data/toydata_relapses.RData")
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/compute_delta.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'firstRAW'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- TRUE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- 3 # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- TRUE # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
subjects = subj_all[1:10]
# subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count <- event_count(output) #output[[1]] # summary of detected events for each subject
res <- results(output) #output[[2]] # extended info on event sequence for each subject
s = output$prog_settings
print(count)
print(res)
criteria_text(output)
#####################################################################################
# Create toy data
# toydata_visits = read_excel("/Users/nmontobbio/code/DATA/MSprog_toydata.xlsx", sheet='visits')
# toydata_visits$id = as.character(toydata_visits$id)
# toydata_visits$date = as.Date(toydata_visits$date)
# toydata_relapses = read_excel("/Users/nmontobbio/code/DATA/MSprog_toydata.xlsx", sheet='relapses')
# toydata_relapses$id = as.character(toydata_relapses$id)
# toydata_relapses$date = as.Date(toydata_relapses$date)
# save(toydata_visits, file="data/toydata_visits.RData")
# save(toydata_relapses, file="data/toydata_relapses.RData")
roxygen2::roxygenise()
rm(list = c("compute_delta", "criteria_text", "event_count", "MSprog", "relapse_indep_from_bounds", "results"))
roxygen2::roxygenise()
library(msprog)
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/compute_delta.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'firstRAW'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- TRUE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- 3 # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- TRUE # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
min(data[[value_col]])
any(is.na(data[value_col]))
a = c(1,2,3,NA)
min(a)
library(msprog)
library(msprog)
rmarkdown::render('vignettes/vignette0.Rmd', output_dir='../')
rmarkdown::render('vignettes/vignette_PIRA.Rmd', output_dir='../')
library(msprog)
rmarkdown::render('vignettes/vignette_PIRA.Rmd', output_dir='../')
rmarkdown::render('vignettes/vignette0.Rmd', output_dir='../')
rmarkdown::render('vignettes/vignette0.Rmd', output_dir='../')
library(msprog)
library(msprog)
rmarkdown::render('vignettes/vignette0.Rmd', output_dir='../')
rmarkdown::render('vignettes/vignette_PIRA.Rmd', output_dir='../')
