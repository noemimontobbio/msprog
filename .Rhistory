rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- FALSE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- NULL # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- 150 # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/prova.xlsx")
# relapse <- NULL
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
# subjects = subj_all[1:100]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count150 <- event_count(output) #output[[1]] # summary of detected events for each subject
res150 <- results(output) #output[[2]] # extended info on event sequence for each subject
s = output$prog_settings
print(count)
print(res)
criteria_text(output)
#####################################################################################
# Create toy data
# toydata_visits = read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog_toydata.xlsx", sheet='visits')
# toydata_visits$id = as.character(toydata_visits$id)
# toydata_visits$date = as.Date(toydata_visits$date)
# toydata_relapses = read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog_toydata.xlsx", sheet='relapses')
# toydata_relapses$id = as.character(toydata_relapses$id)
# toydata_relapses$date = as.Date(toydata_relapses$date)
# save(toydata_visits, file="data/toydata_visits.RData")
# save(toydata_relapses, file="data/toydata_relapses.RData")
sum(res$time2event - res150$time2event)
View(res)
View(res150)
filter(data, subj_col==1005013)
filter(data, subj_col=='1005013')
filter(data, subj_col=='1005016')
filter(data, 'SUBJID'=='1005016')
filter(data, 'SUBJID'==1005016)
View(data)
831/7
a = 5
a==T
if (a) {print(1)}
print(prog_last_visit, prog_last_visit*7, data_id[change_idx,][[date_col]])
print(prog_last_visit, prog_last_visit*7)
print(prog_last_visit)
print(prog_last_visit*7)
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- FALSE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- NULL # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- 150 # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/prova.xlsx")
# relapse <- NULL
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
subjects = subj_all[1:30]
# subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count <- event_count(output) #output[[1]] # summary of detected events for each subject
res <- results(output) #output[[2]] # extended info on event sequence for each subject
count150 <- event_count(output) #output[[1]] # summary of detected events for each subject
res150 <- results(output) #output[[2]] # extended info on event sequence for each subject
prog_last_visit = T
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count <- event_count(output) #output[[1]] # summary of detected events for each subject
res <- results(output) #output[[2]] # extended info on event sequence for each subject
View(res)
View(res150)
View(data)
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- FALSE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- NULL # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- T # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/prova.xlsx")
# relapse <- NULL
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
subjects = subj_all[1:30]
# subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count <- event_count(output) #output[[1]] # summary of detected events for each subject
res <- results(output) #output[[2]] # extended info on event sequence for each subject
s = output$prog_settings
print(count)
print(res)
criteria_text(output)
#####################################################################################
# Create toy data
# toydata_visits = read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog_toydata.xlsx", sheet='visits')
# toydata_visits$id = as.character(toydata_visits$id)
# toydata_visits$date = as.Date(toydata_visits$date)
# toydata_relapses = read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog_toydata.xlsx", sheet='relapses')
# toydata_relapses$id = as.character(toydata_relapses$id)
# toydata_relapses$date = as.Date(toydata_relapses$date)
# save(toydata_visits, file="data/toydata_visits.RData")
# save(toydata_relapses, file="data/toydata_relapses.RData")
rm(list=ls())
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- FALSE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- NULL # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- T # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/prova.xlsx")
# relapse <- NULL
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
# subjects = subj_all[1:30]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count <- event_count(output) #output[[1]] # summary of detected events for each subject
res <- results(output) #output[[2]] # extended info on event sequence for each subject
s = output$prog_settings
print(count)
print(res)
criteria_text(output)
#####################################################################################
# Create toy data
# toydata_visits = read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog_toydata.xlsx", sheet='visits')
# toydata_visits$id = as.character(toydata_visits$id)
# toydata_visits$date = as.Date(toydata_visits$date)
# toydata_relapses = read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog_toydata.xlsx", sheet='relapses')
# toydata_relapses$id = as.character(toydata_relapses$id)
# toydata_relapses$date = as.Date(toydata_relapses$date)
# save(toydata_visits, file="data/toydata_visits.RData")
# save(toydata_relapses, file="data/toydata_relapses.RData")
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- FALSE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- NULL # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- 150 # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/prova.xlsx")
# relapse <- NULL
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
# subjects = subj_all[1:30]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count150 <- event_count(output) #output[[1]] # summary of detected events for each subject
res150 <- results(output) #output[[2]] # extended info on event sequence for each subject
sum(res$time2event - res150$time2event)
View(res)
View(res150)
sum(res[1:100, 'time2event'] - res150[1:100, 'time2event])
sum(res[1:100, 'time2event'] - res150[1:100, 'time2event'])
sum(res[1:200, 'time2event'] - res150[1:200, 'time2event'])
sum(res[1:300, 'time2event'] - res150[1:300, 'time2event'])
sum(res[1:500, 'time2event'] - res150[1:500, 'time2event'])
sum(res[1:1000, 'time2event'] - res150[1:1000, 'time2event'])
sum(res[1:1500, 'time2event'] - res150[1:1500, 'time2event'])
sum(res[1:1800, 'time2event'] - res150[1:1800, 'time2event'])
View(res150)
View(res)
sum(res[1:1900, 'time2event'] - res150[1:1900, 'time2event'])
res150[1:1900, 'time2event']
sum(res[1:1866, 'time2event'] - res150[1:1866, 'time2event'])
sum(res[1:1850, 'time2event'] - res150[1:1850, 'time2event'])
sum(res[1:1810, 'time2event'] - res150[1:1810, 'time2event'])
sum(res[1:1820, 'time2event'] - res150[1:1820, 'time2event'])
sum(res[1:1830, 'time2event'] - res150[1:1830, 'time2event'])
View(data)
View(res150)
View(res)
150*7
max(res$total_fu)
max(res$total_fu)/7
library(readxl)
library(dplyr)
# library(msprog)
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/MSprog.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/event_testing.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/relapse_indep_from_bounds.R')
source('/Users/nmontobbio/code/MSprog/R-MSprog/msprog/R/msprog_methods.R')
#####################################################################################
# Settings
# Data
value_col <- 'AVAL' #CLINICAL_EDSS_Score_Observed'
date_col <- 'ADT' #VISIT_Date'
rdate_col <- 'DATA_RELAPSE' #'VISIT_Date'
subj_col <- 'SUBJID' #'RID'
rsubj_col <- 'SUBJID' #'RID'
# Progression settings
outcome <- 'edss' # 'edss','nhpt','t25fw','sdmt'
conf_weeks <- c(12, 24) # period before confirmation (weeks)
conf_tol_days <- c(0,45) # tolerance window for confirmation visit (days): [t(weeks)-conf_tol(days), t(weeks)+conf_tol(days)]
conf_unbounded_right <- TRUE # if TRUE, confirmation window is [t(weeks)-conf_tol(days), inf)
require_sust_weeks <- 0 # count an event as such only if sustained for _ weeks from confirmation
relapse_to_bl <- 30
relapse_to_event <- 7
relapse_to_conf <- 30
relapse_assoc <- 90
event <- 'multiple'   # 'first' [only the very first event - improvement or progression]
# 'firsteach' [first improvement and first progression]
# 'firstprog' [first progression]
# 'firstprogtype' [first progression of each kind - PIRA, RAW, undefined]
# 'multiple' [all events - to use coupled with roving baseline!]
baseline <- 'roving' # 'fixed', 'roving', 'roving_impr'
relapse_indep <- NULL #relapse_indep_from_bounds(0,0,90,30,90,30)
sub_threshold <- FALSE # if TRUE, include confirmed sub-threshold events for roving baseline
relapse_rebl <- TRUE # if TRUE, search for PIRA events again with post-relapse re-baseline
min_value <- NULL # only consider as progressions those events where the outcome is >= min_value
prog_last_visit <- 160 # if TRUE, include progressions occurring at last visit (i.e. with no confirmation!)
verbose <- 2 # 0[print no info], 1[print concise info], 2[print extended info]
include_dates <- TRUE # if TRUE, include baseline and event dates
include_value <- TRUE # if TRUE, include outcome value at baseline and at event
include_stable <- TRUE # if TRUE, include subjects with no events in extended info
# Custom delta function
delta_fun <- NULL
# delta_fun <- function(baseline) {
#   return(min(baseline/40, 4))
# }
#####################################################################################
# SETUP
# Load data
data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/edss.xlsx")
relapse <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/MSprog-EXPAND/relapse.xlsx")
# data <- read_excel("/Users/nmontobbio/Library/CloudStorage/OneDrive-unige.it/DATA/prova.xlsx")
# relapse <- NULL
# Remove missing values
data <- data[complete.cases(data[ , c(subj_col, value_col, date_col)]), ]
relapse <- relapse[complete.cases(relapse[ , c(rsubj_col, rdate_col)]), ]
#####################################################################################
# Compute progression
subj_all = unique(data[[subj_col]])
# subjects = subj_all[1:30]
subjects <- NULL
output <- MSprog(data, subj_col, value_col, date_col, outcome=outcome, subjects=subjects, relapse=relapse, rdate_col=rdate_col, rsubj_col=rsubj_col,
delta_fun=delta_fun, conf_weeks=conf_weeks, conf_tol_days=conf_tol_days, conf_unbounded_right=conf_unbounded_right,
require_sust_weeks=require_sust_weeks, relapse_to_bl=relapse_to_bl, relapse_to_event=relapse_to_event,
relapse_to_conf=relapse_to_conf, relapse_assoc=relapse_assoc, event=event, baseline=baseline,
relapse_indep=relapse_indep, sub_threshold=sub_threshold, relapse_rebl=relapse_rebl, min_value=min_value,
prog_last_visit=prog_last_visit, verbose=verbose, include_dates=include_dates,
include_value=include_value)
count160 <- event_count(output) #output[[1]] # summary of detected events for each subject
res160 <- results(output) #output[[2]] # extended info on event sequence for each subject
sum(res$time2event - res160$time2event)
roxygen2::roxygenise()
rm(list = c("compute_delta", "criteria_text", "event_count", "is_event", "MSprog", "relapse_indep_from_bounds", "results"))
roxygen2::roxygenise()
install.packages('pandoc')
packageVersion("pandoc")
install.packages("pandoc")
